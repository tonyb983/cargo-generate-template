[package]
name = "{{project-name}}"
authors = [ "{{authors}}" ]
description = "Project description goes here."
version = "0.1.0"
repository = "https://www.github.com/{{gh_username}}/{{project-name}}"
edition = "2021"{% if license != "None" %}
# This ensures that the license will show up correctly on crates.io, don't use `license-file`
license = "{{license}}"{% endif %}
# See: https://doc.rust-lang.org/cargo/reference/manifest.html#the-keywords-field
keywords = []
# See: https://doc.rust-lang.org/cargo/reference/manifest.html#the-categories-field
categories = []
{% if is_library %}# Set up default runner bin to use during development
default-run = "runner"{% endif %}

# This can be removed but makes testing prettier.
[dev-dependencies]
pretty_assertions = "*"{% if use_benches %}
criterion = "*"

[[bench]]
name = "fib_bench"
harness = false{% endif %}

# This setup (`features` and serde `dependencies`) adds a "serde" feature to the crate so end-users can serialize
#   the types contained within. Use:
#       `#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]`
#   to conditionally apply the derive macros to the type.
[features]
default = []
serde = ["dep:serde"]
# You can also optionally use features of dependencies, for example, if you were using the "bytes" crate,
# you could change the above to:
#   serde = ["dep:serde", "bytes/serde"]
# which would include the "serde" dependency, and also activate the "serde" feature of the "bytes" crate
# See: https://doc.rust-lang.org/cargo/reference/features.html
{% if use_flamegraph %}flame = ["dep:flame", "dep:flamer"]{% endif %}
{% if use_puffin %}puffin = ["dep:puffin", "dep:puffin_http"]{% endif %}

[dependencies]
serde = { version = "*", features = ["derive"], optional = true }{% if use_flamegraph %}
flame = { version = "*", optional = true }
flamer = { version = "*", optional = true }{% endif %}{% if use_puffin %}
puffin = { version = "*", optional = true }
puffin_http = { version = "*", optional = true }{% endif %}

# See: https://doc.rust-lang.org/cargo/reference/manifest.html#the-badges-section
[badges]
# The `maintenance` table indicates the status of the maintenance of
# the crate. This may be used by a registry, but is currently not
# used by crates.io. See https://github.com/rust-lang/crates.io/issues/2437
# and https://github.com/rust-lang/crates.io/issues/2438 for more details.
#
# The `status` field is required. Available options are:
# - `actively-developed`: New features are being added and bugs are being fixed.
# - `passively-maintained`: There are no plans for new features, but the maintainer intends to
#   respond to issues that get filed.
# - `as-is`: The crate is feature complete, the maintainer does not intend to continue working on
#   it or providing support, but it works for the purposes it was designed for.
# - `experimental`: The author wants to share it with the community but is not intending to meet
#   anyone's particular use case.
# - `looking-for-maintainer`: The current maintainer would like to transfer the crate to someone
#   else.
# - `deprecated`: The maintainer does not recommend using this crate (the description of the crate
#   can describe why, there could be a better solution available or there could be problems with
#   the crate that the author does not want to fix).
# - `none`: Displays no badge on crates.io, since the maintainer has not chosen to specify
#   their intentions, potential crate users will need to investigate on their own.
maintenance = { status = "actively-developed" } # or another, see above
